// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: admin.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (
    username,
    hashed_password,
    is_active,
    role_id
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, username, hashed_password, is_active, role_id, created_at, updated_at
`

type CreateAdminParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	IsActive       bool   `json:"is_active"`
	RoleID         int64  `json:"role_id"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRow(ctx, createAdmin,
		arg.Username,
		arg.HashedPassword,
		arg.IsActive,
		arg.RoleID,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.IsActive,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, username, hashed_password, is_active, role_id, created_at, updated_at FROM admins
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, username string) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdmin, username)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.IsActive,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
