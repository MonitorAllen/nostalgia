// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: article.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countArticles = `-- name: CountArticles :one
SELECT count(*)
FROM articles
where is_publish = $1
`

func (q *Queries) CountArticles(ctx context.Context, isPublish bool) (int64, error) {
	row := q.db.QueryRow(ctx, countArticles, isPublish)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (id,
                  title,
                  summary,
                  content,
                  is_publish,
                  owner)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, summary, content, views, likes, is_publish, owner, create_at, update_at, delete_at
`

type CreateArticleParams struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Summary   string    `json:"summary"`
	Content   string    `json:"content"`
	IsPublish bool      `json:"is_publish"`
	Owner     uuid.UUID `json:"owner"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle,
		arg.ID,
		arg.Title,
		arg.Summary,
		arg.Content,
		arg.IsPublish,
		arg.Owner,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.Views,
		&i.Likes,
		&i.IsPublish,
		&i.Owner,
		&i.CreateAt,
		&i.UpdateAt,
		&i.DeleteAt,
	)
	return i, err
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, summary, content, views, likes, is_publish, owner, create_at, update_at, delete_at
FROM articles
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, id uuid.UUID) (Article, error) {
	row := q.db.QueryRow(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.Views,
		&i.Likes,
		&i.IsPublish,
		&i.Owner,
		&i.CreateAt,
		&i.UpdateAt,
		&i.DeleteAt,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT p.id, p.title, p.summary, p.content, p.views, p.likes, p.is_publish, p.owner, p.create_at, p.update_at, p.delete_at, u.username,
       COALESCE(ARRAY_AGG(t.name), '{}') AS tags
FROM articles p
LEFT JOIN tags t on p.id = t.article_id
LEFT JOIN users u on p.owner = u.id
WHERE
    p.is_publish = $3
GROUP BY p.id, p.title, p.summary, p.content, p.views, p.likes, p.is_publish, p.owner, p.create_at, p.update_at, p.delete_at, u.username
ORDER BY p.create_at DESC
LIMIT $1 OFFSET $2
`

type ListArticlesParams struct {
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
	IsPublish pgtype.Bool `json:"is_publish"`
}

type ListArticlesRow struct {
	ID        uuid.UUID   `json:"id"`
	Title     string      `json:"title"`
	Summary   string      `json:"summary"`
	Content   string      `json:"content"`
	Views     int32       `json:"views"`
	Likes     int32       `json:"likes"`
	IsPublish bool        `json:"is_publish"`
	Owner     uuid.UUID   `json:"owner"`
	CreateAt  time.Time   `json:"create_at"`
	UpdateAt  time.Time   `json:"update_at"`
	DeleteAt  time.Time   `json:"delete_at"`
	Username  pgtype.Text `json:"username"`
	Tags      interface{} `json:"tags"`
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]ListArticlesRow, error) {
	rows, err := q.db.Query(ctx, listArticles, arg.Limit, arg.Offset, arg.IsPublish)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListArticlesRow{}
	for rows.Next() {
		var i ListArticlesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.Content,
			&i.Views,
			&i.Likes,
			&i.IsPublish,
			&i.Owner,
			&i.CreateAt,
			&i.UpdateAt,
			&i.DeleteAt,
			&i.Username,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
SET
    title = COALESCE($1, title),
    summary = COALESCE($2, summary),
    content = COALESCE($3, content),
    is_publish = COALESCE($4, is_publish),
    update_at = COALESCE($5, update_at)
WHERE id = $6
RETURNING id, title, summary, content, views, likes, is_publish, owner, create_at, update_at, delete_at
`

type UpdateArticleParams struct {
	Title     pgtype.Text        `json:"title"`
	Summary   pgtype.Text        `json:"summary"`
	Content   pgtype.Text        `json:"content"`
	IsPublish pgtype.Bool        `json:"is_publish"`
	UpdateAt  pgtype.Timestamptz `json:"update_at"`
	ID        uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, updateArticle,
		arg.Title,
		arg.Summary,
		arg.Content,
		arg.IsPublish,
		arg.UpdateAt,
		arg.ID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Content,
		&i.Views,
		&i.Likes,
		&i.IsPublish,
		&i.Owner,
		&i.CreateAt,
		&i.UpdateAt,
		&i.DeleteAt,
	)
	return i, err
}
