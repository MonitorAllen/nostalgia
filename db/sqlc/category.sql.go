// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countArticlesByCategoryID = `-- name: CountArticlesByCategoryID :one
SELECT count(*)
FROM articles
WHERE category_id = $1
`

func (q *Queries) CountArticlesByCategoryID(ctx context.Context, categoryID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countArticlesByCategoryID, categoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countCategories = `-- name: CountCategories :one
SELECT count(*)
FROM categories
`

func (q *Queries) CountCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name)
VALUES ($1)
RETURNING id, name, is_system, created_at, updated_at
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE
FROM categories
WHERE id = $1 AND is_system = false
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, is_system, created_at, updated_at FROM categories WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, name, is_system, created_at, updated_at FROM categories WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllCategories = `-- name: ListAllCategories :many
SELECT id, name, is_system, created_at, updated_at
FROM categories
ORDER BY created_at DESC
`

func (q *Queries) ListAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsSystem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticlesByCategoryID = `-- name: ListArticlesByCategoryID :many
SELECT a.id,
       a.title,
       a.summary,
       a.views,
       a.likes,
       a.is_publish,
       a.owner,
       a.category_id,
       a.created_at,
       a.updated_at,
       a.deleted_at,
       c.name,
       u.username
FROM articles a
         LEFT JOIN categories c on a.category_id = c.id
         LEFT JOIN users u on a.owner = u.id
WHERE category_id = $1
  AND is_publish = true
ORDER BY a.created_at DESC
LIMIT $2 OFFSET $3
`

type ListArticlesByCategoryIDParams struct {
	CategoryID int64 `json:"category_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

type ListArticlesByCategoryIDRow struct {
	ID         uuid.UUID   `json:"id"`
	Title      string      `json:"title"`
	Summary    string      `json:"summary"`
	Views      int32       `json:"views"`
	Likes      int32       `json:"likes"`
	IsPublish  bool        `json:"is_publish"`
	Owner      uuid.UUID   `json:"owner"`
	CategoryID int64       `json:"category_id"`
	CreatedAt  time.Time   `json:"created_at"`
	UpdatedAt  time.Time   `json:"updated_at"`
	DeletedAt  time.Time   `json:"deleted_at"`
	Name       pgtype.Text `json:"name"`
	Username   pgtype.Text `json:"username"`
}

func (q *Queries) ListArticlesByCategoryID(ctx context.Context, arg ListArticlesByCategoryIDParams) ([]ListArticlesByCategoryIDRow, error) {
	rows, err := q.db.Query(ctx, listArticlesByCategoryID, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListArticlesByCategoryIDRow{}
	for rows.Next() {
		var i ListArticlesByCategoryIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.Views,
			&i.Likes,
			&i.IsPublish,
			&i.Owner,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesCountArticles = `-- name: ListCategoriesCountArticles :many
SELECT c.id, c.name, c.is_system, count(a.id) AS article_count, c.created_at, c.updated_at
FROM categories c
         LEFT JOIN articles a on a.category_id = c.id AND a.is_publish = true
GROUP BY c.id
ORDER BY article_count DESC
LIMIT $1 OFFSET $2
`

type ListCategoriesCountArticlesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListCategoriesCountArticlesRow struct {
	ID           int64     `json:"id"`
	Name         string    `json:"name"`
	IsSystem     bool      `json:"is_system"`
	ArticleCount int64     `json:"article_count"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) ListCategoriesCountArticles(ctx context.Context, arg ListCategoriesCountArticlesParams) ([]ListCategoriesCountArticlesRow, error) {
	rows, err := q.db.Query(ctx, listCategoriesCountArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCategoriesCountArticlesRow{}
	for rows.Next() {
		var i ListCategoriesCountArticlesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsSystem,
			&i.ArticleCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
set name      = $1,
    updated_at=now()
WHERE id = $2
RETURNING id, name, is_system, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.Name, arg.ID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
