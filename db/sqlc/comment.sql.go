// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comment.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addCommentLikes = `-- name: AddCommentLikes :one
UPDATE comments
SET likes = likes + 1
WHERE id = $1
RETURNING id, content, article_id, parent_id, likes, from_user_id, to_user_id, created_at, deleted_at
`

func (q *Queries) AddCommentLikes(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, addCommentLikes, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ArticleID,
		&i.ParentID,
		&i.Likes,
		&i.FromUserID,
		&i.ToUserID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments
    (content, article_id, parent_id, from_user_id, to_user_id)
VALUES
    ($1, $2, $3, $4, $5)
RETURNING id, content, article_id, parent_id, likes, from_user_id, to_user_id, created_at, deleted_at
`

type CreateCommentParams struct {
	Content    string    `json:"content"`
	ArticleID  uuid.UUID `json:"article_id"`
	ParentID   int64     `json:"parent_id"`
	FromUserID uuid.UUID `json:"from_user_id"`
	ToUserID   uuid.UUID `json:"to_user_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.Content,
		arg.ArticleID,
		arg.ParentID,
		arg.FromUserID,
		arg.ToUserID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ArticleID,
		&i.ParentID,
		&i.Likes,
		&i.FromUserID,
		&i.ToUserID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteChildComments = `-- name: DeleteChildComments :exec
DELETE FROM comments WHERE parent_id = $1
`

func (q *Queries) DeleteChildComments(ctx context.Context, parentID int64) error {
	_, err := q.db.Exec(ctx, deleteChildComments, parentID)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, content, article_id, parent_id, likes, from_user_id, to_user_id, created_at, deleted_at FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRow(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.ArticleID,
		&i.ParentID,
		&i.Likes,
		&i.FromUserID,
		&i.ToUserID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCommentsByArticleID = `-- name: ListCommentsByArticleID :many
SELECT c.id, c.content, c.article_id, c.parent_id, c.likes, c.from_user_id, c.to_user_id, c.created_at, c.deleted_at, from_u.username as from_user_name, to_u.username as to_user_name FROM comments c
LEFT JOIN users from_u on c.from_user_id = from_u.id
LEFT JOIN users to_u on c.to_user_id = to_u.id
WHERE
    c.article_id = $1 AND c.deleted_at = '0001-01-01 00:00:00.000000 +00:00'
ORDER BY c.id
`

type ListCommentsByArticleIDRow struct {
	ID           int64       `json:"id"`
	Content      string      `json:"content"`
	ArticleID    uuid.UUID   `json:"article_id"`
	ParentID     int64       `json:"parent_id"`
	Likes        int32       `json:"likes"`
	FromUserID   uuid.UUID   `json:"from_user_id"`
	ToUserID     uuid.UUID   `json:"to_user_id"`
	CreatedAt    time.Time   `json:"created_at"`
	DeletedAt    time.Time   `json:"deleted_at"`
	FromUserName pgtype.Text `json:"from_user_name"`
	ToUserName   pgtype.Text `json:"to_user_name"`
}

func (q *Queries) ListCommentsByArticleID(ctx context.Context, articleID uuid.UUID) ([]ListCommentsByArticleIDRow, error) {
	rows, err := q.db.Query(ctx, listCommentsByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCommentsByArticleIDRow{}
	for rows.Next() {
		var i ListCommentsByArticleIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.ArticleID,
			&i.ParentID,
			&i.Likes,
			&i.FromUserID,
			&i.ToUserID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.FromUserName,
			&i.ToUserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
